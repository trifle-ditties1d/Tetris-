import pygame
import random

# Initialize Pygame
pygame.init()

# Screen dimensions and block size
SCREEN_WIDTH = 300
SCREEN_HEIGHT = 600
BLOCK_SIZE = 30

# Colors
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
GRAY = (128, 128, 128)
COLORS = [
    (0, 255, 255),  # Cyan
    (255, 165, 0),  # Orange
    (0, 0, 255),    # Blue
    (255, 0, 0),    # Red
    (0, 255, 0),    # Green
    (128, 0, 128),  # Purple
    (255, 255, 0),  # Yellow
]

# Tetromino shapes
SHAPES = [
    [[1, 1, 1, 1]],  # I
    [[1, 1, 1], [0, 1, 0]],  # T
    [[1, 1, 0], [0, 1, 1]],  # Z
    [[0, 1, 1], [1, 1, 0]],  # S
    [[1, 1], [1, 1]],        # O
    [[1, 1, 1], [1, 0, 0]],  # L
    [[1, 1, 1], [0, 0, 1]],  # J
]

class Tetris:
    def __init__(self, width, height):
        self.width = width
        self.height = height
        self.field = [[0] * width for _ in range(height)]
        self.score = 0
        self.game_over = False
        self.current_piece = None
        self.next_piece = self.new_piece()
        self.spawn_piece()

    def new_piece(self):
        shape = random.choice(SHAPES)
        color = random.choice(COLORS)
        return {'shape': shape, 'color': color, 'x': self.width // 2 - len(shape[0]) // 2, 'y': 0}

    def spawn_piece(self):
        self.current_piece = self.next_piece
        self.next_piece = self.new_piece()
        if not self.valid_move(self.current_piece['shape'], self.current_piece['x'], self.current_piece['y']):
            self.game_over = True

    def rotate_piece(self):
        rotated = list(zip(*self.current_piece['shape'][::-1]))
        if self.valid_move(rotated, self.current_piece['x'], self.current_piece['y']):
            self.current_piece['shape'] = rotated

    def valid_move(self, shape, x, y):
        for i, row in enumerate(shape):
            for j, cell in enumerate(row):
                if cell:
                    if x + j < 0 or x + j >= self.width or y + i >= self.height:
                        return False
                    if y + i >= 0 and self.field[y + i][x + j]:
                        return False
        return True

    def freeze_piece(self):
        shape = self.current_piece['shape']
        x, y = self.current_piece['x'], self.current_piece['y']
        for i, row in enumerate(shape):
            for j, cell in enumerate(row):
                if cell and y + i >= 0:
                    self.field[y + i][x + j] = self.current_piece['color']
        self.clear_lines()
        self.spawn_piece()

    def clear_lines(self):
        lines_to_clear = [i for i, row in enumerate(self.field) if all(row)]
        for i in lines_to_clear:
            del self.field[i]
            self.field.insert(0, [0] * self.width)
        self.score += len(lines_to_clear)

    def move(self, dx, dy):
        if self.valid_move(self.current_piece['shape'], self.current_piece['x'] + dx, self.current_piece['y'] + dy):
            self.current_piece['x'] += dx
            self.current_piece['y'] += dy
        elif dy:
            self.freeze_piece()

def draw_grid(screen):
    for x in range(0, SCREEN_WIDTH, BLOCK_SIZE):
        pygame.draw.line(screen, GRAY, (x, 0), (x, SCREEN_HEIGHT))
    for y in range(0, SCREEN_HEIGHT, BLOCK_SIZE):
        pygame.draw.line(screen, GRAY, (0, y), (SCREEN_WIDTH, y))

def draw_field(screen, field):
    for y, row in enumerate(field):
        for x, cell in enumerate(row):
            if cell:
                pygame.draw.rect(screen, cell, (x * BLOCK_SIZE, y * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE))

def draw_piece(screen, piece):
    shape = piece['shape']
    color = piece['color']
    for i, row in enumerate(shape):
        for j, cell in enumerate(row):
            if cell:
                x = (piece['x'] + j) * BLOCK_SIZE
                y = (piece['y'] + i) * BLOCK_SIZE
                pygame.draw.rect(screen, color, (x, y, BLOCK_SIZE, BLOCK_SIZE))

def main():
    screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
    pygame.display.set_caption("Tetris")
    clock = pygame.time.Clock()
    tetris = Tetris(SCREEN_WIDTH // BLOCK_SIZE, SCREEN_HEIGHT // BLOCK_SIZE)
    fall_time = 0

    running = True
    while running:
        screen.fill(BLACK)
        fall_speed = 500  # Fall speed in milliseconds

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_LEFT:
                    tetris.move(-1, 0)
                elif event.key == pygame.K_RIGHT:
                    tetris.move(1, 0)
                elif event.key == pygame.K_DOWN:
                    tetris.move(0, 1)
                elif event.key == pygame.K_UP:
                    tetris.rotate_piece()

        fall_time += clock.get_rawtime()
        clock.tick()
        if fall_time > fall_speed:
            tetris.move(0, 1)
            fall_time = 0

        if tetris.game_over:
            print("Game Over! Final Score:", tetris.score)
            running = False

        draw_grid(screen)
        draw_field(screen, tetris.field)
        draw_piece(screen, tetris.current_piece)
        pygame.display.flip()

    pygame.quit()

if __name__ == "__main__":
    main()
